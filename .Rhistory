install.packages("installr")
library(installr)
updateR()
suppressMessages(library(randomForest))
###########################################################
# Import packages
suppressMessages(library(tidyverse))
library(ggplot2)
library(dplyr)
library(magrittr)
library(rsample)
setwd("C:/Users/94248/Desktop/SSC2022case1")
###########################################################
# Data cleaning steps
# Read in data
eval_360 = na.omit(read.csv("raw_data/physician_360degree_evaluation.csv"))
sofa = na.omit(read.csv("raw_data/patient_SOFA_trajectory.csv"))
doc_cha = na.omit(read.csv("raw_data/doctor_characteristic.csv"))
pat_cha = na.omit(read.csv("raw_data/patient_characteristic.csv"))
# 360 evaluation data wrangle
eval_360$professionalism = rowSums(eval_360[, c(1:3, 5:9)])/length(c(1:3, 5:9))
eval_360$non_technic = rowSums(eval_360[,c(4, 10:22)])/length(c(4, 10:22))
eval_360_group = eval_360 %>% group_by(doctor=DocID, position) %>%
summarize(tech=mean(professionalism), non_tech=mean(non_technic),
overall=mean(Q23))
eval_360_group
# doctor data set wrangle
doc_draft = doc_cha %>% select(doctor=DocID, overall_score=M4, eval_rank=M5)
data_doc = doc_draft %>% left_join(eval_360_group, by = c("doctor"))
data_doc$tech[is.na(data_doc$tech)] = mean(data_doc$tech,na.rm=TRUE)
data_doc$non_tech[is.na(data_doc$non_tech)] = mean(data_doc$non_tech,na.rm=TRUE)
data_doc$overall[is.na(data_doc$overall)] = mean(data_doc$overall,na.rm=TRUE)
data_doc$position[is.na(data_doc$position)] = "None"
data_doc
# sofa data set wrangle
sofa_draft = sofa %>% group_by(PtID) %>% summarize(max_score=max(SOFA), ini_day=min(day), end_day=max(day))
# sofa_max
sofa_initial = sofa %>% filter(day==0) %>% select(PtID, initial_score=SOFA)
# sofa_initial
sofa_end = sofa %>% group_by(PtID) %>% top_n(1, day) %>% select(PtID, end_score=SOFA)
# sofa_end
data_sofa = sofa_draft %>%
left_join(sofa_initial, by = c("PtID")) %>%
left_join(sofa_end, by = c("PtID")) %>%
select(patient=PtID, max_score, initial_score, end_score)
data_sofa
# patient data wrangle
eval_patiant = pat_cha %>% select(patient=PtID, doctor=DocID, age_ge60=P1, apacheII_score=P5, alive_outcome=P8)
eval_patiant$age_ge60 = factor(ifelse(eval_patiant$age_ge60=="ge60","yes","no"))
eval_patiant$alive_outcome = factor(ifelse(eval_patiant$alive_outcome=="A","yes","no"))
data_pat = eval_patiant %>% left_join(data_sofa, by = c("patient"))
data_pat
################################################################
# Machine learning preparation
doc = data_doc
pat =data_pat
doc$position = factor(doc$position, levels = c("None", "bedside", "non-bedside"), labels = c(0, 1, 2))
pat$age_ge60 = factor(ifelse(pat$age_ge60=="no", 0, 1))
pat$alive_outcome = factor(ifelse(pat$alive_outcome=="no", 0, 1))
# train-split-test
pat_split = initial_split(pat[-c(1, 2)], prop=0.8, strata=alive_outcome)
train = training(pat_split)
test = testing(pat_split)
# KNN
library(class)
library(caret)
knn_acc = numeric()
for(i in 1:50){
knn_predte = knn(train=train, test=test, cl=train[,1], k=i, prob=T)
knn_acc = c(knn_acc,mean(knn_predte==test[,1]))
}
knn_acc_df = data.frame(k=seq(1,50), acc=knn_acc)
knn_best = subset(knn_acc_df, acc==max(acc))[1,]
paste("Best k is", knn_best$k, " with accuracy ", knn_best$acc,"in KNN")
knn_pred <- knn(train=train, test=test, cl=train[,1], k=knn_best$k, prob=T)
confusionMatrix(knn_pred, test$alive_outcome)
